<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Orx;
use Doctrine\ORM\QueryBuilder;

/**
 * EvaluationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvaluationRepository extends EntityRepository
{
    function findByTeacherAndStatus($teacherId, $status)
    {
        /** @var QueryBuilder $queryBuilder */
        $queryBuilder = $this->createQueryBuilder('e');
        $queryBuilder
            ->select('e')
            ->where('e.teacher = :teacherId');
        $params = array(
            'teacherId' => $teacherId
        );

        switch ($status) {
            case 'draft':
                $queryBuilder
                    ->andWhere('e.activeAssignment = false');
                break;
            case 'incoming':
                $queryBuilder
                    ->andWhere('e.activeAssignment = true')
                    ->andWhere(':now < e.dateStartAssignment');
                break;
            case 'in-progress':
                $queryBuilder
                    ->andWhere('e.activeAssignment = true')
                    ->andWhere(new Orx(array(
                        'e.activeCorrection = true AND :now BETWEEN e.dateStartAssignment AND e.dateEndCorrection',
                        'e.activeCorrection = false AND :now > e.dateStartAssignment'
                    )));
                break;
            case 'finished':
                $queryBuilder
                    ->andWhere('e.activeCorrection = true')
                    ->andWhere(':now > e.dateEndCorrection')
                    ->andWhere('e.archived = false');
                break;
            case 'archived':
                $queryBuilder
                    ->andWhere('e.archived = true');
                break;
        }
        if (!in_array($status, array('draft', 'archived'))) {
            $params['now'] = new \DateTime();
        }
        $queryBuilder->setParameters($params);
        $query = $queryBuilder->getQuery();
        $results = $query->getResult();
        return $results;
    }
}
